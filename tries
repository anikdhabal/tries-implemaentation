/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

class trienode{
    public:
    char data;
    trienode* children[26];
    bool isTerminal;
    trienode(char ch){
        data=ch;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        isTerminal=false;
        
}
};
class Trie {
    trienode* root;

public:
    /** Initialize your data structure here. */ 
    Trie() {
  root=new trienode('\0');
    }
    void insertutil(string word,trienode* root){
        if(word.size()==0){
            root->isTerminal=true;
            return;
}
        int index=word[0]-'a';
        trienode* child;
        if(root->children[index]!=NULL){
             child=root->children[index];
        }
        else{
            child=new trienode(word[0]);
            root->children[index]=child;
        }
        
        insertutil(word.substr(1),child);
            
}

    /** Inserts a word into the trie. */
    void insert(string word) {
      insertutil(word,root);
    }
    bool searchutil(trienode* root,string word){
        if(word.size()==0)
            return root->isTerminal;
        
        int index=word[0]-'a';
        trienode* child;
        if(root->children[index]!=NULL)
            child=root->children[index];
        else
            return false;
        return searchutil(child,word.substr(1)); 
        
}

    /** Returns if the word is in the trie. */
    bool search(string word) {
        return searchutil(root,word);

    }
    bool prefixutil(trienode* root,string prefix){
        if(prefix.size()==0)
            return true;
       int index=prefix[0]-'a';
        trienode* child;
        if(root->children[index]!=NULL)
            child=root->children[index];
        else
            return false;
        return prefixutil(child,prefix.substr(1)); 
}

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        return prefixutil(root,prefix);

    }
};
